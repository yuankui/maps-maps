{"version":3,"sources":["components/LayerListView.jsx","components/form/ColorInput.jsx","components/form/GeojsonFileInput.jsx","components/AddLayerView.jsx","components/LayerManageView.jsx","components/DeckGLView.jsx","App.js","reportWebVitals.js","index.js"],"names":["LayerListView","layers","onToggle","className","map","layer","style","backgroundColor","color","opacity","visible","name","href","onClick","e","preventDefault","EyeOutlined","EyeInvisibleOutlined","ColorInput","value","onChange","hex","GeojsonFileInput","placeholder","accept","type","a","target","files","text","points","JSON","parse","message","error","AddLayerView","onAddLayer","useState","showModal","setShowModal","hideModal","useCallback","onCancel","footer","onFinish","data","Item","rules","required","htmlType","LayerManageView","onLayersChange","newLayers","newLayer","filter","length","Error","addLayer","colorToRGBArray","Array","isArray","slice","c","rgb","r","g","b","DeckGLView","geoJsons","geojson","GeoJsonLayer","id","pickable","stroked","filled","extruded","pointType","getFillColor","getPointRadius","pointRadiusUnits","getTextAnchor","getTextPixelOffset","textCharacterSet","getText","f","properties","getTextColor","getTextSize","React","longitude","latitude","zoom","viewport","setViewport","initialViewState","onViewportChange","controller","mapStyle","mapboxApiAccessToken","right","top","zIndex","App","setLayers","visibleLayers","useMemo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8853be6f.chunk.js","sourcesContent":["import { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\n\n/**\n * 控制台图层数据列表\n * @param {*} param0 \n * @returns \n */\nfunction LayerListView({ layers, onToggle }) {\n    return <>\n        <h1 className='text-2xl mb-4'>图层管理</h1>\n        {\n            layers.map(layer => {\n                return <div key={layer.name} className='mb-2 flex flex-row items-center py-1 px-2 border-1 rounded justify-between'>\n                    <div className='flex flex-row items-center'>\n                        <div className='inline-flex w-3 h-3 rounded-full mx-1' style={{\n                            backgroundColor: layer.color,\n                        }} />\n                        <div className='p-1 pr-2' style={{\n                            opacity: layer.visible ? 1 : 0.2,\n                        }}>{layer.name}</div>\n\n                    </div>\n                    <div className='flex flex-row items-center justify-center'>\n                        \n                        <button href='' onClick={e => {\n                            e.preventDefault();\n                            onToggle(layer.name);\n                        }} className='flex flex-row items-center'>\n                            {layer.visible ? <EyeOutlined /> : <EyeInvisibleOutlined />}\n                        </button>\n                    </div>\n                </div>\n            })\n        }\n    </>\n}\n\nexport default LayerListView;","import { SketchPicker } from \"react-color\";\n\nfunction ColorInput({value, onChange}) {\n    return <SketchPicker className='m-2' color={value} onChange={e => {\n        onChange(e.hex);\n    }} />\n}\n\nexport default ColorInput;","import { Input, message } from \"antd\";\n\nfunction GeojsonFileInput({ value, onChange }) {\n    return <Input\n        placeholder='geojson文件'\n        accept='.geojson,.json'\n        className='m-2'\n        type='file'\n        onChange={async (e) => {\n            const text = await e.target.files[0].text();\n            try {\n                let points = JSON.parse(text);\n                onChange(points);\n            } catch (e) {\n                message.error(\"请选择geojson文件\");\n                return;\n            }\n        }} />\n}\n\nexport default GeojsonFileInput;","import { Button, Form, Input, message, Modal } from \"antd\";\nimport { useCallback, useState } from \"react\";\nimport ColorInput from \"./form/ColorInput\";\nimport GeojsonFileInput from \"./form/GeojsonFileInput\";\n\n\nfunction AddLayerView({ onAddLayer }) {\n    const [showModal, setShowModal] = useState(false);\n\n    const hideModal = useCallback(() => {\n        setShowModal(false);\n    }, []);\n\n    const finishForm = (data) => {\n        try {\n            onAddLayer(data)\n            hideModal()\n        } catch(e) {\n            message.error(e.message)\n        }\n    }\n\n    return <>\n        <Button onClick={e => {\n            setShowModal(true);\n        }}>\n            新增图层\n        </Button>\n        <Modal\n            visible={showModal}\n            onCancel={hideModal}\n            footer={null}\n        >\n            <h1 className='m-2 text-2xl'>新增图层</h1>\n            <Form onFinish={finishForm}>\n                <Form.Item name=\"name\" rules={[{ required: true }]}>\n                    <Input className='m-2' placeholder=\"LayerName\" />\n                </Form.Item>\n                <Form.Item name=\"points\" rules={[{ required: true }]}>\n                    <GeojsonFileInput />\n                </Form.Item>\n                <Form.Item name=\"color\" rules={[{ required: true }]}>\n                    <ColorInput />\n                </Form.Item>\n                <Form.Item>\n                    <div className='flex flex-row justify-end gap-2'>\n                        <Button onClick={hideModal}>Cancel</Button>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                    </div>\n                </Form.Item>\n            </Form>\n        </Modal>\n    </>\n}\n\nexport default AddLayerView;","import LayerListView from \"./LayerListView\";\nimport AddLayerView from \"./AddLayerView\";\n\n/**\n * 地图控制面板\n * @returns \n */\nfunction LayerManageView({ layers, onLayersChange }) {\n    // 新增一组位置\n    const addLayer = (newLayer) => {\n        const sameNameLayer = layers.filter(\n            (layer) => layer.name === newLayer.name\n        );\n        if (sameNameLayer.length > 0) {\n            throw new Error(\"名称重复\");\n        }\n        onLayersChange([...layers, newLayer]);\n    };\n\n    // 禁用\n    const toggleLayer = (name) => {\n        const newLayers = layers.map((layer) => {\n            return layer.name !== name\n                ? layer\n                : {\n                    ...layer,\n                    visible: !layer.visible,\n                };\n        });\n\n        return onLayersChange(newLayers);\n    };\n\n    return (\n        <div className=\"absolute left-2 top-2 bg-white p-5 rounded w-56\">\n            {/* 图层列表 */}\n            <LayerListView layers={layers} onToggle={toggleLayer} />\n            {/* 弹窗 */}\n            <AddLayerView\n                onAddLayer={({ name, points, color }) => {\n                    addLayer({\n                        name,\n                        color,\n                        points,\n                        visible: true,\n                    });\n                }}\n            />\n        </div>\n    );\n}\n\nexport default LayerManageView;\n","import { GeoJsonLayer } from '@deck.gl/layers';\nimport DeckGL from '@deck.gl/react';\nimport { rgb } from 'd3-color';\nimport React from 'react';\nimport { StaticMap as MapboxMap, FullscreenControl, NavigationControl } from 'react-map-gl';\n\nconst mapboxAccessToken = 'pk.eyJ1IjoieXVhbmt1aSIsImEiOiJja3VtNGhranUwNzg3MzBsaWx2dnFod2ZjIn0.gCAWnEO9GQ2reK72LZXUQA';\nconst mapboxStyle = \"mapbox://styles/yuankui/ckumcg5loegxe17pr0kay2zkd\"\n\n/**\n * 转换颜色格式\n * @param {*} color : ;\n * @returns \n */\nfunction colorToRGBArray(color) {\n    if (!color) {\n        return [255, 255, 255, 0];\n    }\n    if (Array.isArray(color)) {\n        return color.slice(0, 4);\n    }\n    const c = rgb(color);\n    return [c.r, c.g, c.b, 255];\n}\n\nfunction DeckGLView({ geoJsons }) {\n\n    // 根据图层数据，建立deck.gl图层\n    const layers = geoJsons.map(geojson => {\n        return new GeoJsonLayer({\n            id: 'geojson-layer:' + geojson.name,\n            data: geojson.points,\n            pickable: true,\n            stroked: false,\n            filled: true,\n            extruded: true,\n            pointType: 'circle+text',\n            getFillColor: colorToRGBArray(geojson.color),\n            getPointRadius: 5,\n            pointRadiusUnits: 'pixels',\n            getTextAnchor: 'start',\n            getTextPixelOffset: [6, 0],\n            textCharacterSet: 'auto', // 解决中文不显示的问题\n            getText: f => f.properties.name,\n            getTextColor: colorToRGBArray(geojson.color),\n            getTextSize: 12,\n        })\n    })\n\n    // 设置原始坐标\n    const [viewport, setViewport] = React.useState({\n        longitude: 114.02589,\n        latitude: 22.540777,\n        zoom: 11,\n    });\n\n    return <DeckGL\n        initialViewState={viewport}\n        {...viewport}\n        onViewportChange={setViewport}\n        controller={true}\n        layers={layers}\n    >\n        <MapboxMap\n            mapStyle={mapboxStyle}\n            mapboxApiAccessToken={mapboxAccessToken}>\n            \n            {/* 全屏control */}\n            <FullscreenControl style={{\n                right: 10,\n                top: 10,\n                zIndex: 10,\n            }} />\n\n            {/* 缩放control */}\n            <NavigationControl style={{\n                right: 10,\n                top: 50\n            }} />\n        </MapboxMap>\n        \n    </DeckGL>\n}\n\nexport default DeckGLView;","import { useMemo, useState } from \"react\";\nimport \"./App.css\";\nimport LayerManageView from \"./components/LayerManageView\";\nimport DeckGLView from \"./components/DeckGLView\";\n\nfunction App() {\n    const [layers, setLayers] = useState([]);\n\n    const visibleLayers = useMemo(() => {\n        return layers.filter((layer) => !!layer.visible);\n    }, [layers]);\n\n    return (\n        <div className=\"App p-10 flex items-center flex-col h-screen\">\n            <div className=\"w-3/4 h-full flex flex-col\">\n                <h1 className=\"font-bold font-5xl\">Map Demo</h1>\n\n                <div className=\"relative flex flex-col items-stretch flex-1\">\n                    {/* 地图 */}\n                    <DeckGLView geoJsons={visibleLayers} />\n                    {/* 控制面板 */}\n                    <LayerManageView\n                        layers={layers}\n                        onLayersChange={setLayers}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}